# This file was auto-generated by Fern from our API Definition.

import typing

import os
import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import SeamEnvironment
from .resources.access_codes.client import AccessCodesClient, AsyncAccessCodesClient
from .resources.action_attempts.client import ActionAttemptsClient, AsyncActionAttemptsClient
from .resources.client_sessions.client import AsyncClientSessionsClient, ClientSessionsClient
from .resources.connect_webviews.client import AsyncConnectWebviewsClient, ConnectWebviewsClient
from .resources.connected_accounts.client import AsyncConnectedAccountsClient, ConnectedAccountsClient
from .resources.devices.client import AsyncDevicesClient, DevicesClient
from .resources.events.client import AsyncEventsClient, EventsClient
from .resources.health.client import AsyncHealthClient, HealthClient
from .resources.locks.client import AsyncLocksClient, LocksClient
from .resources.noise_sensors.client import AsyncNoiseSensorsClient, NoiseSensorsClient
from .resources.thermostats.client import AsyncThermostatsClient, ThermostatsClient
from .resources.webhooks.client import AsyncWebhooksClient, WebhooksClient
from .resources.workspaces.client import AsyncWorkspacesClient, WorkspacesClient


class Seam:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SeamEnvironment = SeamEnvironment.DEFAULT,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        timeout: typing.Optional[float] = 60
    ):
        if api_key is None:
            api_key = os.environ.get("SEAM_API_KEY", None)
        if api_key is None:
            raise Exception(
                "SEAM_API_KEY not found in environment, and api_key not provided"
            )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx.Client(timeout=timeout),
        )
        self.access_codes = AccessCodesClient(client_wrapper=self._client_wrapper)
        self.action_attempts = ActionAttemptsClient(client_wrapper=self._client_wrapper)
        self.connected_accounts = ConnectedAccountsClient(client_wrapper=self._client_wrapper)
        self.devices = DevicesClient(client_wrapper=self._client_wrapper)
        self.client_sessions = ClientSessionsClient(client_wrapper=self._client_wrapper)
        self.events = EventsClient(client_wrapper=self._client_wrapper)
        self.health = HealthClient(client_wrapper=self._client_wrapper)
        self.connect_webviews = ConnectWebviewsClient(client_wrapper=self._client_wrapper)
        self.locks = LocksClient(client_wrapper=self._client_wrapper)
        self.thermostats = ThermostatsClient(client_wrapper=self._client_wrapper)
        self.webhooks = WebhooksClient(client_wrapper=self._client_wrapper)
        self.workspaces = WorkspacesClient(client_wrapper=self._client_wrapper)
        self.noise_sensors = NoiseSensorsClient(client_wrapper=self._client_wrapper)


class AsyncSeam:
    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: SeamEnvironment = SeamEnvironment.DEFAULT,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        timeout: typing.Optional[float] = 60
    ):
        if api_key is None:
            api_key = os.environ.get("SEAM_API_KEY", None)
        if api_key is None:
            raise Exception(
                "SEAM_API_KEY not found in environment, and api_key not provided"
            )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            httpx_client=httpx.AsyncClient(timeout=timeout),
        )
        self.access_codes = AsyncAccessCodesClient(client_wrapper=self._client_wrapper)
        self.action_attempts = AsyncActionAttemptsClient(client_wrapper=self._client_wrapper)
        self.connected_accounts = AsyncConnectedAccountsClient(client_wrapper=self._client_wrapper)
        self.devices = AsyncDevicesClient(client_wrapper=self._client_wrapper)
        self.client_sessions = AsyncClientSessionsClient(client_wrapper=self._client_wrapper)
        self.events = AsyncEventsClient(client_wrapper=self._client_wrapper)
        self.health = AsyncHealthClient(client_wrapper=self._client_wrapper)
        self.connect_webviews = AsyncConnectWebviewsClient(client_wrapper=self._client_wrapper)
        self.locks = AsyncLocksClient(client_wrapper=self._client_wrapper)
        self.thermostats = AsyncThermostatsClient(client_wrapper=self._client_wrapper)
        self.webhooks = AsyncWebhooksClient(client_wrapper=self._client_wrapper)
        self.workspaces = AsyncWorkspacesClient(client_wrapper=self._client_wrapper)
        self.noise_sensors = AsyncNoiseSensorsClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: SeamEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
