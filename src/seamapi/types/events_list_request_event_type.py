# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class EventsListRequestEventType(str, enum.Enum):
    DEVICE_CONNECTED = "device.connected"
    DEVICE_UNMANAGED_CONNECTED = "device.unmanaged.connected"
    DEVICE_DISCONNECTED = "device.disconnected"
    DEVICE_UNMANAGED_DISCONNECTED = "device.unmanaged.disconnected"
    DEVICE_CONVERTED_TO_UNMANAGED = "device.converted_to_unmanaged"
    DEVICE_UNMANAGED_CONVERTED_TO_MANAGED = "device.unmanaged.converted_to_managed"
    DEVICE_REMOVED = "device.removed"
    DEVICE_TAMPERED = "device.tampered"
    DEVICE_LOW_BATTERY = "device.low_battery"
    DEVICE_BATTERY_STATUS_CHANGED = "device.battery_status_changed"
    ACCESS_CODE_CREATED = "access_code.created"
    ACCESS_CODE_CHANGED = "access_code.changed"
    ACCESS_CODE_SCHEDULED_ON_DEVICE = "access_code.scheduled_on_device"
    ACCESS_CODE_SET_ON_DEVICE = "access_code.set_on_device"
    ACCESS_CODE_DELETED = "access_code.deleted"
    ACCESS_CODE_REMOVED_FROM_DEVICE = "access_code.removed_from_device"
    ACCESS_CODE_FAILED_TO_SET_ON_DEVICE = "access_code.failed_to_set_on_device"
    ACCESS_CODE_DELAY_IN_SETTING_ON_DEVICE = "access_code.delay_in_setting_on_device"
    ACCESS_CODE_FAILED_TO_REMOVE_FROM_DEVICE = "access_code.failed_to_remove_from_device"
    ACCESS_CODE_DELAY_IN_REMOVING_FROM_DEVICE = "access_code.delay_in_removing_from_device"
    ACCESS_CODE_UNMANAGED_CONVERTED_TO_MANAGED = "access_code.unmanaged.converted_to_managed"
    ACCESS_CODE_UNMANAGED_FAILED_TO_CONVERT_TO_MANAGED = "access_code.unmanaged.failed_to_convert_to_managed"
    ACCESS_CODE_UNMANAGED_CREATED = "access_code.unmanaged.created"
    ACCESS_CODE_UNMANAGED_REMOVED = "access_code.unmanaged.removed"
    LOCK_LOCKED = "lock.locked"
    LOCK_UNLOCKED = "lock.unlocked"
    CONNECTED_ACCOUNT_CONNECTED = "connected_account.connected"
    CONNECTED_ACCOUNT_CREATED = "connected_account.created"
    CONNECTED_ACCOUNT_DISCONNECTED = "connected_account.disconnected"
    CONNECTED_ACCOUNT_COMPLETED_FIRST_SYNC = "connected_account.completed_first_sync"
    NOISE_SENSOR_NOISE_THRESHOLD_TRIGGERED = "noise_sensor.noise_threshold_triggered"
    ACCESS_CODE_BACKUP_ACCESS_CODE_PULLED = "access_code.backup_access_code_pulled"

    def visit(
        self,
        device_connected: typing.Callable[[], T_Result],
        device_unmanaged_connected: typing.Callable[[], T_Result],
        device_disconnected: typing.Callable[[], T_Result],
        device_unmanaged_disconnected: typing.Callable[[], T_Result],
        device_converted_to_unmanaged: typing.Callable[[], T_Result],
        device_unmanaged_converted_to_managed: typing.Callable[[], T_Result],
        device_removed: typing.Callable[[], T_Result],
        device_tampered: typing.Callable[[], T_Result],
        device_low_battery: typing.Callable[[], T_Result],
        device_battery_status_changed: typing.Callable[[], T_Result],
        access_code_created: typing.Callable[[], T_Result],
        access_code_changed: typing.Callable[[], T_Result],
        access_code_scheduled_on_device: typing.Callable[[], T_Result],
        access_code_set_on_device: typing.Callable[[], T_Result],
        access_code_deleted: typing.Callable[[], T_Result],
        access_code_removed_from_device: typing.Callable[[], T_Result],
        access_code_failed_to_set_on_device: typing.Callable[[], T_Result],
        access_code_delay_in_setting_on_device: typing.Callable[[], T_Result],
        access_code_failed_to_remove_from_device: typing.Callable[[], T_Result],
        access_code_delay_in_removing_from_device: typing.Callable[[], T_Result],
        access_code_unmanaged_converted_to_managed: typing.Callable[[], T_Result],
        access_code_unmanaged_failed_to_convert_to_managed: typing.Callable[[], T_Result],
        access_code_unmanaged_created: typing.Callable[[], T_Result],
        access_code_unmanaged_removed: typing.Callable[[], T_Result],
        lock_locked: typing.Callable[[], T_Result],
        lock_unlocked: typing.Callable[[], T_Result],
        connected_account_connected: typing.Callable[[], T_Result],
        connected_account_created: typing.Callable[[], T_Result],
        connected_account_disconnected: typing.Callable[[], T_Result],
        connected_account_completed_first_sync: typing.Callable[[], T_Result],
        noise_sensor_noise_threshold_triggered: typing.Callable[[], T_Result],
        access_code_backup_access_code_pulled: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is EventsListRequestEventType.DEVICE_CONNECTED:
            return device_connected()
        if self is EventsListRequestEventType.DEVICE_UNMANAGED_CONNECTED:
            return device_unmanaged_connected()
        if self is EventsListRequestEventType.DEVICE_DISCONNECTED:
            return device_disconnected()
        if self is EventsListRequestEventType.DEVICE_UNMANAGED_DISCONNECTED:
            return device_unmanaged_disconnected()
        if self is EventsListRequestEventType.DEVICE_CONVERTED_TO_UNMANAGED:
            return device_converted_to_unmanaged()
        if self is EventsListRequestEventType.DEVICE_UNMANAGED_CONVERTED_TO_MANAGED:
            return device_unmanaged_converted_to_managed()
        if self is EventsListRequestEventType.DEVICE_REMOVED:
            return device_removed()
        if self is EventsListRequestEventType.DEVICE_TAMPERED:
            return device_tampered()
        if self is EventsListRequestEventType.DEVICE_LOW_BATTERY:
            return device_low_battery()
        if self is EventsListRequestEventType.DEVICE_BATTERY_STATUS_CHANGED:
            return device_battery_status_changed()
        if self is EventsListRequestEventType.ACCESS_CODE_CREATED:
            return access_code_created()
        if self is EventsListRequestEventType.ACCESS_CODE_CHANGED:
            return access_code_changed()
        if self is EventsListRequestEventType.ACCESS_CODE_SCHEDULED_ON_DEVICE:
            return access_code_scheduled_on_device()
        if self is EventsListRequestEventType.ACCESS_CODE_SET_ON_DEVICE:
            return access_code_set_on_device()
        if self is EventsListRequestEventType.ACCESS_CODE_DELETED:
            return access_code_deleted()
        if self is EventsListRequestEventType.ACCESS_CODE_REMOVED_FROM_DEVICE:
            return access_code_removed_from_device()
        if self is EventsListRequestEventType.ACCESS_CODE_FAILED_TO_SET_ON_DEVICE:
            return access_code_failed_to_set_on_device()
        if self is EventsListRequestEventType.ACCESS_CODE_DELAY_IN_SETTING_ON_DEVICE:
            return access_code_delay_in_setting_on_device()
        if self is EventsListRequestEventType.ACCESS_CODE_FAILED_TO_REMOVE_FROM_DEVICE:
            return access_code_failed_to_remove_from_device()
        if self is EventsListRequestEventType.ACCESS_CODE_DELAY_IN_REMOVING_FROM_DEVICE:
            return access_code_delay_in_removing_from_device()
        if self is EventsListRequestEventType.ACCESS_CODE_UNMANAGED_CONVERTED_TO_MANAGED:
            return access_code_unmanaged_converted_to_managed()
        if self is EventsListRequestEventType.ACCESS_CODE_UNMANAGED_FAILED_TO_CONVERT_TO_MANAGED:
            return access_code_unmanaged_failed_to_convert_to_managed()
        if self is EventsListRequestEventType.ACCESS_CODE_UNMANAGED_CREATED:
            return access_code_unmanaged_created()
        if self is EventsListRequestEventType.ACCESS_CODE_UNMANAGED_REMOVED:
            return access_code_unmanaged_removed()
        if self is EventsListRequestEventType.LOCK_LOCKED:
            return lock_locked()
        if self is EventsListRequestEventType.LOCK_UNLOCKED:
            return lock_unlocked()
        if self is EventsListRequestEventType.CONNECTED_ACCOUNT_CONNECTED:
            return connected_account_connected()
        if self is EventsListRequestEventType.CONNECTED_ACCOUNT_CREATED:
            return connected_account_created()
        if self is EventsListRequestEventType.CONNECTED_ACCOUNT_DISCONNECTED:
            return connected_account_disconnected()
        if self is EventsListRequestEventType.CONNECTED_ACCOUNT_COMPLETED_FIRST_SYNC:
            return connected_account_completed_first_sync()
        if self is EventsListRequestEventType.NOISE_SENSOR_NOISE_THRESHOLD_TRIGGERED:
            return noise_sensor_noise_threshold_triggered()
        if self is EventsListRequestEventType.ACCESS_CODE_BACKUP_ACCESS_CODE_PULLED:
            return access_code_backup_access_code_pulled()
