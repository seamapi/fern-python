# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions

from ..core.datetime_utils import serialize_datetime
from .access_codes_unmanaged_list_response_access_codes_item_type import (
    AccessCodesUnmanagedListResponseAccessCodesItemType,
)


class AccessCodesUnmanagedListResponseAccessCodesItem(pydantic.BaseModel):
    type: AccessCodesUnmanagedListResponseAccessCodesItemType
    access_code_id: str
    device_id: str
    name: typing.Optional[str]
    code: typing.Optional[str]
    created_at: dt.datetime
    errors: typing.Optional[typing.Any]
    warnings: typing.Optional[typing.Any]
    is_managed: str
    starts_at: typing.Optional[dt.datetime]
    ends_at: typing.Optional[dt.datetime]
    status: typing_extensions.Literal["set"]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
