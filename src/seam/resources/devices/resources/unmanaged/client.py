# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.jsonable_encoder import jsonable_encoder
from .....environment import SeamEnvironment
from .....errors.bad_request_error import BadRequestError
from .....errors.unauthorized_error import UnauthorizedError
from .....types.devices_unmanaged_list_request_device_type import DevicesUnmanagedListRequestDeviceType
from .....types.devices_unmanaged_list_request_device_types_item import DevicesUnmanagedListRequestDeviceTypesItem
from .....types.devices_unmanaged_list_request_manufacturer import DevicesUnmanagedListRequestManufacturer
from .....types.devices_unmanaged_list_response import DevicesUnmanagedListResponse
from .....types.devices_unmanaged_update_response import DevicesUnmanagedUpdateResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class UnmanagedClient:
    def __init__(self, *, environment: SeamEnvironment = SeamEnvironment.DEFAULT, client_wrapper: SyncClientWrapper):
        self._environment = environment
        self._client_wrapper = client_wrapper

    def list(
        self,
        *,
        connected_account_id: typing.Optional[str] = OMIT,
        connected_account_ids: typing.Optional[typing.List[str]] = OMIT,
        connect_webview_id: typing.Optional[str] = OMIT,
        device_type: typing.Optional[DevicesUnmanagedListRequestDeviceType] = OMIT,
        device_types: typing.Optional[typing.List[DevicesUnmanagedListRequestDeviceTypesItem]] = OMIT,
        manufacturer: typing.Optional[DevicesUnmanagedListRequestManufacturer] = OMIT,
        device_ids: typing.Optional[typing.List[str]] = OMIT,
        limit: typing.Optional[float] = OMIT,
        created_before: typing.Optional[dt.datetime] = OMIT,
    ) -> DevicesUnmanagedListResponse:
        """
        Parameters:
            - connected_account_id: typing.Optional[str].

            - connected_account_ids: typing.Optional[typing.List[str]].

            - connect_webview_id: typing.Optional[str].

            - device_type: typing.Optional[DevicesUnmanagedListRequestDeviceType].

            - device_types: typing.Optional[typing.List[DevicesUnmanagedListRequestDeviceTypesItem]].

            - manufacturer: typing.Optional[DevicesUnmanagedListRequestManufacturer].

            - device_ids: typing.Optional[typing.List[str]].

            - limit: typing.Optional[float].

            - created_before: typing.Optional[dt.datetime].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if connected_account_id is not OMIT:
            _request["connected_account_id"] = connected_account_id
        if connected_account_ids is not OMIT:
            _request["connected_account_ids"] = connected_account_ids
        if connect_webview_id is not OMIT:
            _request["connect_webview_id"] = connect_webview_id
        if device_type is not OMIT:
            _request["device_type"] = device_type
        if device_types is not OMIT:
            _request["device_types"] = device_types
        if manufacturer is not OMIT:
            _request["manufacturer"] = manufacturer
        if device_ids is not OMIT:
            _request["device_ids"] = device_ids
        if limit is not OMIT:
            _request["limit"] = limit
        if created_before is not OMIT:
            _request["created_before"] = created_before
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "devices/unmanaged/list"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DevicesUnmanagedListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(self, *, device_id: str, is_managed: str) -> DevicesUnmanagedUpdateResponse:
        """
        Parameters:
            - device_id: str.

            - is_managed: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "devices/unmanaged/update"),
            json=jsonable_encoder({"device_id": device_id, "is_managed": is_managed}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DevicesUnmanagedUpdateResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncUnmanagedClient:
    def __init__(self, *, environment: SeamEnvironment = SeamEnvironment.DEFAULT, client_wrapper: AsyncClientWrapper):
        self._environment = environment
        self._client_wrapper = client_wrapper

    async def list(
        self,
        *,
        connected_account_id: typing.Optional[str] = OMIT,
        connected_account_ids: typing.Optional[typing.List[str]] = OMIT,
        connect_webview_id: typing.Optional[str] = OMIT,
        device_type: typing.Optional[DevicesUnmanagedListRequestDeviceType] = OMIT,
        device_types: typing.Optional[typing.List[DevicesUnmanagedListRequestDeviceTypesItem]] = OMIT,
        manufacturer: typing.Optional[DevicesUnmanagedListRequestManufacturer] = OMIT,
        device_ids: typing.Optional[typing.List[str]] = OMIT,
        limit: typing.Optional[float] = OMIT,
        created_before: typing.Optional[dt.datetime] = OMIT,
    ) -> DevicesUnmanagedListResponse:
        """
        Parameters:
            - connected_account_id: typing.Optional[str].

            - connected_account_ids: typing.Optional[typing.List[str]].

            - connect_webview_id: typing.Optional[str].

            - device_type: typing.Optional[DevicesUnmanagedListRequestDeviceType].

            - device_types: typing.Optional[typing.List[DevicesUnmanagedListRequestDeviceTypesItem]].

            - manufacturer: typing.Optional[DevicesUnmanagedListRequestManufacturer].

            - device_ids: typing.Optional[typing.List[str]].

            - limit: typing.Optional[float].

            - created_before: typing.Optional[dt.datetime].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if connected_account_id is not OMIT:
            _request["connected_account_id"] = connected_account_id
        if connected_account_ids is not OMIT:
            _request["connected_account_ids"] = connected_account_ids
        if connect_webview_id is not OMIT:
            _request["connect_webview_id"] = connect_webview_id
        if device_type is not OMIT:
            _request["device_type"] = device_type
        if device_types is not OMIT:
            _request["device_types"] = device_types
        if manufacturer is not OMIT:
            _request["manufacturer"] = manufacturer
        if device_ids is not OMIT:
            _request["device_ids"] = device_ids
        if limit is not OMIT:
            _request["limit"] = limit
        if created_before is not OMIT:
            _request["created_before"] = created_before
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "devices/unmanaged/list"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DevicesUnmanagedListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(self, *, device_id: str, is_managed: str) -> DevicesUnmanagedUpdateResponse:
        """
        Parameters:
            - device_id: str.

            - is_managed: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment.value}/", "devices/unmanaged/update"),
            json=jsonable_encoder({"device_id": device_id, "is_managed": is_managed}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(DevicesUnmanagedUpdateResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
