# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from ...core.api_error import ApiError
from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.jsonable_encoder import jsonable_encoder
from ...errors.bad_request_error import BadRequestError
from ...errors.unauthorized_error import UnauthorizedError
from ...types.client_session import ClientSession
from ...types.client_sessions_create_response import ClientSessionsCreateResponse
from ...types.client_sessions_delete_response import ClientSessionsDeleteResponse
from ...types.client_sessions_get_response import ClientSessionsGetResponse
from ...types.client_sessions_list_response import ClientSessionsListResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ClientSessionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        user_identifier_key: typing.Optional[str] = OMIT,
        connect_webview_ids: typing.Optional[typing.List[str]] = OMIT,
        connected_account_ids: typing.Optional[typing.List[str]] = OMIT,
    ) -> ClientSession:
        """
        Parameters:
            - user_identifier_key: typing.Optional[str]. <span style="white-space: nowrap">`non-empty`</span>

            - connect_webview_ids: typing.Optional[typing.List[str]].

            - connected_account_ids: typing.Optional[typing.List[str]].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if user_identifier_key is not OMIT:
            _request["user_identifier_key"] = user_identifier_key
        if connect_webview_ids is not OMIT:
            _request["connect_webview_ids"] = connect_webview_ids
        if connected_account_ids is not OMIT:
            _request["connected_account_ids"] = connected_account_ids
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "client_sessions/create"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            _parsed_response = pydantic.parse_obj_as(ClientSessionsCreateResponse, _response.json())  # type: ignore
            return _parsed_response.client_session
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, *, client_session_id: str) -> ClientSessionsDeleteResponse:
        """
        Parameters:
            - client_session_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "client_sessions/delete"),
            json=jsonable_encoder({"client_session_id": client_session_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClientSessionsDeleteResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, *, client_session_id: typing.Optional[str] = OMIT, user_identifier_key: typing.Optional[str] = OMIT
    ) -> ClientSession:
        """
        Parameters:
            - client_session_id: typing.Optional[str].

            - user_identifier_key: typing.Optional[str].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if client_session_id is not OMIT:
            _request["client_session_id"] = client_session_id
        if user_identifier_key is not OMIT:
            _request["user_identifier_key"] = user_identifier_key
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "client_sessions/get"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            _parsed_response = pydantic.parse_obj_as(ClientSessionsGetResponse, _response.json())  # type: ignore
            return _parsed_response.client_session
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(
        self,
        *,
        client_session_id: typing.Optional[str] = OMIT,
        user_identifier_key: typing.Optional[str] = OMIT,
        without_user_identifier_key: typing.Optional[bool] = OMIT,
    ) -> typing.List[ClientSession]:
        """
        Parameters:
            - client_session_id: typing.Optional[str].

            - user_identifier_key: typing.Optional[str].

            - without_user_identifier_key: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if client_session_id is not OMIT:
            _request["client_session_id"] = client_session_id
        if user_identifier_key is not OMIT:
            _request["user_identifier_key"] = user_identifier_key
        if without_user_identifier_key is not OMIT:
            _request["without_user_identifier_key"] = without_user_identifier_key
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "client_sessions/list"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            _parsed_response = pydantic.parse_obj_as(ClientSessionsListResponse, _response.json())  # type: ignore
            return _parsed_response.client_sessions;
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncClientSessionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        user_identifier_key: typing.Optional[str] = OMIT,
        connect_webview_ids: typing.Optional[typing.List[str]] = OMIT,
        connected_account_ids: typing.Optional[typing.List[str]] = OMIT,
    ) -> ClientSessionsCreateResponse:
        """
        Parameters:
            - user_identifier_key: typing.Optional[str]. <span style="white-space: nowrap">`non-empty`</span>

            - connect_webview_ids: typing.Optional[typing.List[str]].

            - connected_account_ids: typing.Optional[typing.List[str]].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if user_identifier_key is not OMIT:
            _request["user_identifier_key"] = user_identifier_key
        if connect_webview_ids is not OMIT:
            _request["connect_webview_ids"] = connect_webview_ids
        if connected_account_ids is not OMIT:
            _request["connected_account_ids"] = connected_account_ids
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "client_sessions/create"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClientSessionsCreateResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, *, client_session_id: str) -> ClientSessionsDeleteResponse:
        """
        Parameters:
            - client_session_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "client_sessions/delete"),
            json=jsonable_encoder({"client_session_id": client_session_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClientSessionsDeleteResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, *, client_session_id: typing.Optional[str] = OMIT, user_identifier_key: typing.Optional[str] = OMIT
    ) -> ClientSessionsGetResponse:
        """
        Parameters:
            - client_session_id: typing.Optional[str].

            - user_identifier_key: typing.Optional[str].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if client_session_id is not OMIT:
            _request["client_session_id"] = client_session_id
        if user_identifier_key is not OMIT:
            _request["user_identifier_key"] = user_identifier_key
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "client_sessions/get"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClientSessionsGetResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(
        self,
        *,
        client_session_id: typing.Optional[str] = OMIT,
        user_identifier_key: typing.Optional[str] = OMIT,
        without_user_identifier_key: typing.Optional[bool] = OMIT,
    ) -> ClientSessionsListResponse:
        """
        Parameters:
            - client_session_id: typing.Optional[str].

            - user_identifier_key: typing.Optional[str].

            - without_user_identifier_key: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {}
        if client_session_id is not OMIT:
            _request["client_session_id"] = client_session_id
        if user_identifier_key is not OMIT:
            _request["user_identifier_key"] = user_identifier_key
        if without_user_identifier_key is not OMIT:
            _request["without_user_identifier_key"] = without_user_identifier_key
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "client_sessions/list"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(ClientSessionsListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
