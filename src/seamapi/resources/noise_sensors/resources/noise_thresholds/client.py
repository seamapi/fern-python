# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import pydantic

from .....core.api_error import ApiError
from .....core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .....core.jsonable_encoder import jsonable_encoder
from .....errors.bad_request_error import BadRequestError
from .....errors.unauthorized_error import UnauthorizedError
from .....types.noise_thresholds_create_response import NoiseThresholdsCreateResponse
from .....types.noise_thresholds_delete_response import NoiseThresholdsDeleteResponse
from .....types.noise_thresholds_get_response import NoiseThresholdsGetResponse
from .....types.noise_thresholds_list_response import NoiseThresholdsListResponse
from .....types.noise_thresholds_update_response import NoiseThresholdsUpdateResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class NoiseThresholdsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        device_id: str,
        sync: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        starts_daily_at: str,
        ends_daily_at: str,
        noise_threshold_decibels: typing.Optional[float] = OMIT,
        noise_threshold_nrs: typing.Optional[float] = OMIT,
    ) -> NoiseThresholdsCreateResponse:
        """
        Parameters:
            - device_id: str.

            - sync: typing.Optional[bool].

            - name: typing.Optional[str].

            - starts_daily_at: str.

            - ends_daily_at: str.

            - noise_threshold_decibels: typing.Optional[float].

            - noise_threshold_nrs: typing.Optional[float].
        """
        _request: typing.Dict[str, typing.Any] = {
            "device_id": device_id,
            "starts_daily_at": starts_daily_at,
            "ends_daily_at": ends_daily_at,
        }
        if sync is not OMIT:
            _request["sync"] = sync
        if name is not OMIT:
            _request["name"] = name
        if noise_threshold_decibels is not OMIT:
            _request["noise_threshold_decibels"] = noise_threshold_decibels
        if noise_threshold_nrs is not OMIT:
            _request["noise_threshold_nrs"] = noise_threshold_nrs
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "noise_sensors/noise_thresholds/create"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(NoiseThresholdsCreateResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self, *, noise_threshold_id: str, device_id: str, sync: typing.Optional[bool] = OMIT
    ) -> NoiseThresholdsDeleteResponse:
        """
        Parameters:
            - noise_threshold_id: str.

            - device_id: str.

            - sync: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {"noise_threshold_id": noise_threshold_id, "device_id": device_id}
        if sync is not OMIT:
            _request["sync"] = sync
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "noise_sensors/noise_thresholds/delete"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(NoiseThresholdsDeleteResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(self, *, noise_threshold_id: str) -> NoiseThresholdsGetResponse:
        """
        Parameters:
            - noise_threshold_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "noise_sensors/noise_thresholds/get"),
            json=jsonable_encoder({"noise_threshold_id": noise_threshold_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(NoiseThresholdsGetResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list(self, *, device_id: str) -> NoiseThresholdsListResponse:
        """
        Parameters:
            - device_id: str.
        """
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "noise_sensors/noise_thresholds/list"),
            json=jsonable_encoder({"device_id": device_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(NoiseThresholdsListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        *,
        noise_threshold_id: str,
        device_id: str,
        sync: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        starts_daily_at: typing.Optional[str] = OMIT,
        ends_daily_at: typing.Optional[str] = OMIT,
        noise_threshold_decibels: typing.Optional[float] = OMIT,
        noise_threshold_nrs: typing.Optional[float] = OMIT,
    ) -> NoiseThresholdsUpdateResponse:
        """
        Parameters:
            - noise_threshold_id: str.

            - device_id: str.

            - sync: typing.Optional[bool].

            - name: typing.Optional[str].

            - starts_daily_at: typing.Optional[str].

            - ends_daily_at: typing.Optional[str].

            - noise_threshold_decibels: typing.Optional[float].

            - noise_threshold_nrs: typing.Optional[float].
        """
        _request: typing.Dict[str, typing.Any] = {"noise_threshold_id": noise_threshold_id, "device_id": device_id}
        if sync is not OMIT:
            _request["sync"] = sync
        if name is not OMIT:
            _request["name"] = name
        if starts_daily_at is not OMIT:
            _request["starts_daily_at"] = starts_daily_at
        if ends_daily_at is not OMIT:
            _request["ends_daily_at"] = ends_daily_at
        if noise_threshold_decibels is not OMIT:
            _request["noise_threshold_decibels"] = noise_threshold_decibels
        if noise_threshold_nrs is not OMIT:
            _request["noise_threshold_nrs"] = noise_threshold_nrs
        _response = self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "noise_sensors/noise_thresholds/update"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(NoiseThresholdsUpdateResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncNoiseThresholdsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        device_id: str,
        sync: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        starts_daily_at: str,
        ends_daily_at: str,
        noise_threshold_decibels: typing.Optional[float] = OMIT,
        noise_threshold_nrs: typing.Optional[float] = OMIT,
    ) -> NoiseThresholdsCreateResponse:
        """
        Parameters:
            - device_id: str.

            - sync: typing.Optional[bool].

            - name: typing.Optional[str].

            - starts_daily_at: str.

            - ends_daily_at: str.

            - noise_threshold_decibels: typing.Optional[float].

            - noise_threshold_nrs: typing.Optional[float].
        """
        _request: typing.Dict[str, typing.Any] = {
            "device_id": device_id,
            "starts_daily_at": starts_daily_at,
            "ends_daily_at": ends_daily_at,
        }
        if sync is not OMIT:
            _request["sync"] = sync
        if name is not OMIT:
            _request["name"] = name
        if noise_threshold_decibels is not OMIT:
            _request["noise_threshold_decibels"] = noise_threshold_decibels
        if noise_threshold_nrs is not OMIT:
            _request["noise_threshold_nrs"] = noise_threshold_nrs
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "noise_sensors/noise_thresholds/create"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(NoiseThresholdsCreateResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, *, noise_threshold_id: str, device_id: str, sync: typing.Optional[bool] = OMIT
    ) -> NoiseThresholdsDeleteResponse:
        """
        Parameters:
            - noise_threshold_id: str.

            - device_id: str.

            - sync: typing.Optional[bool].
        """
        _request: typing.Dict[str, typing.Any] = {"noise_threshold_id": noise_threshold_id, "device_id": device_id}
        if sync is not OMIT:
            _request["sync"] = sync
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "noise_sensors/noise_thresholds/delete"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(NoiseThresholdsDeleteResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(self, *, noise_threshold_id: str) -> NoiseThresholdsGetResponse:
        """
        Parameters:
            - noise_threshold_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "noise_sensors/noise_thresholds/get"),
            json=jsonable_encoder({"noise_threshold_id": noise_threshold_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(NoiseThresholdsGetResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list(self, *, device_id: str) -> NoiseThresholdsListResponse:
        """
        Parameters:
            - device_id: str.
        """
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "noise_sensors/noise_thresholds/list"),
            json=jsonable_encoder({"device_id": device_id}),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(NoiseThresholdsListResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        *,
        noise_threshold_id: str,
        device_id: str,
        sync: typing.Optional[bool] = OMIT,
        name: typing.Optional[str] = OMIT,
        starts_daily_at: typing.Optional[str] = OMIT,
        ends_daily_at: typing.Optional[str] = OMIT,
        noise_threshold_decibels: typing.Optional[float] = OMIT,
        noise_threshold_nrs: typing.Optional[float] = OMIT,
    ) -> NoiseThresholdsUpdateResponse:
        """
        Parameters:
            - noise_threshold_id: str.

            - device_id: str.

            - sync: typing.Optional[bool].

            - name: typing.Optional[str].

            - starts_daily_at: typing.Optional[str].

            - ends_daily_at: typing.Optional[str].

            - noise_threshold_decibels: typing.Optional[float].

            - noise_threshold_nrs: typing.Optional[float].
        """
        _request: typing.Dict[str, typing.Any] = {"noise_threshold_id": noise_threshold_id, "device_id": device_id}
        if sync is not OMIT:
            _request["sync"] = sync
        if name is not OMIT:
            _request["name"] = name
        if starts_daily_at is not OMIT:
            _request["starts_daily_at"] = starts_daily_at
        if ends_daily_at is not OMIT:
            _request["ends_daily_at"] = ends_daily_at
        if noise_threshold_decibels is not OMIT:
            _request["noise_threshold_decibels"] = noise_threshold_decibels
        if noise_threshold_nrs is not OMIT:
            _request["noise_threshold_nrs"] = noise_threshold_nrs
        _response = await self._client_wrapper.httpx_client.request(
            "POST",
            urllib.parse.urljoin(f"{self._client_wrapper.get_base_url()}/", "noise_sensors/noise_thresholds/update"),
            json=jsonable_encoder(_request),
            headers=self._client_wrapper.get_headers(),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(NoiseThresholdsUpdateResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        if _response.status_code == 401:
            raise UnauthorizedError(pydantic.parse_obj_as(typing.Any, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
