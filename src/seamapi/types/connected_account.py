# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .connected_account_custom_metadata_value import ConnectedAccountCustomMetadataValue
from .connected_account_user_identifier import ConnectedAccountUserIdentifier


class ConnectedAccount(pydantic.BaseModel):
    connected_account_id: typing.Optional[str]
    created_at: typing.Optional[dt.datetime]
    user_identifier: typing.Optional[ConnectedAccountUserIdentifier]
    account_type: typing.Optional[str]
    errors: typing.Optional[typing.Any]
    warnings: typing.Optional[typing.Any]
    custom_metadata: typing.Optional[typing.Dict[str, typing.Optional[ConnectedAccountCustomMetadataValue]]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
