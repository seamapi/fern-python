# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import SeamEnvironment
from .resources.access_codes.client import AccessCodesClient, AsyncAccessCodesClient
from .resources.action_attempts.client import ActionAttemptsClient, AsyncActionAttemptsClient
from .resources.client_sessions.client import AsyncClientSessionsClient, ClientSessionsClient
from .resources.connect_webviews.client import AsyncConnectWebviewsClient, ConnectWebviewsClient
from .resources.connected_accounts.client import AsyncConnectedAccountsClient, ConnectedAccountsClient
from .resources.devices.client import AsyncDevicesClient, DevicesClient
from .resources.events.client import AsyncEventsClient, EventsClient
from .resources.health.client import AsyncHealthClient, HealthClient
from .resources.locks.client import AsyncLocksClient, LocksClient
from .resources.noise_sensors.client import AsyncNoiseSensorsClient, NoiseSensorsClient
from .resources.thermostats.client import AsyncThermostatsClient, ThermostatsClient
from .resources.webhooks.client import AsyncWebhooksClient, WebhooksClient
from .resources.workspaces.client import AsyncWorkspacesClient, WorkspacesClient


class Seam:
    def __init__(
        self,
        *,
        environment: SeamEnvironment = SeamEnvironment.DEFAULT,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        timeout: typing.Optional[float] = 60
    ):
        self._environment = environment
        self._client_wrapper = SyncClientWrapper(api_key=api_key, httpx_client=httpx.Client(timeout=timeout))
        self.access_codes = AccessCodesClient(environment=environment, client_wrapper=self._client_wrapper)
        self.action_attempts = ActionAttemptsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.connected_accounts = ConnectedAccountsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.devices = DevicesClient(environment=environment, client_wrapper=self._client_wrapper)
        self.client_sessions = ClientSessionsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.events = EventsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.health = HealthClient(environment=environment, client_wrapper=self._client_wrapper)
        self.connect_webviews = ConnectWebviewsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.locks = LocksClient(environment=environment, client_wrapper=self._client_wrapper)
        self.thermostats = ThermostatsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.webhooks = WebhooksClient(environment=environment, client_wrapper=self._client_wrapper)
        self.workspaces = WorkspacesClient(environment=environment, client_wrapper=self._client_wrapper)
        self.noise_sensors = NoiseSensorsClient(environment=environment, client_wrapper=self._client_wrapper)


class AsyncSeam:
    def __init__(
        self,
        *,
        environment: SeamEnvironment = SeamEnvironment.DEFAULT,
        api_key: typing.Optional[typing.Union[str, typing.Callable[[], str]]] = None,
        timeout: typing.Optional[float] = 60
    ):
        self._environment = environment
        self._client_wrapper = AsyncClientWrapper(api_key=api_key, httpx_client=httpx.AsyncClient(timeout=timeout))
        self.access_codes = AsyncAccessCodesClient(environment=environment, client_wrapper=self._client_wrapper)
        self.action_attempts = AsyncActionAttemptsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.connected_accounts = AsyncConnectedAccountsClient(
            environment=environment, client_wrapper=self._client_wrapper
        )
        self.devices = AsyncDevicesClient(environment=environment, client_wrapper=self._client_wrapper)
        self.client_sessions = AsyncClientSessionsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.events = AsyncEventsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.health = AsyncHealthClient(environment=environment, client_wrapper=self._client_wrapper)
        self.connect_webviews = AsyncConnectWebviewsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.locks = AsyncLocksClient(environment=environment, client_wrapper=self._client_wrapper)
        self.thermostats = AsyncThermostatsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.webhooks = AsyncWebhooksClient(environment=environment, client_wrapper=self._client_wrapper)
        self.workspaces = AsyncWorkspacesClient(environment=environment, client_wrapper=self._client_wrapper)
        self.noise_sensors = AsyncNoiseSensorsClient(environment=environment, client_wrapper=self._client_wrapper)
